"""Road to Eternity"""
import arcade

# Constants
SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 650
SCREEN_TITLE = "Road To Eternity"

#Scale
CHARACTER_SCALING = 0.75
TILE_SCALING = 0.5
COIN_SCALING = 0.5

# Movement speed 
PLAYER_MOVEMENT_SPEED = 5
GRAVITY = 1
PLAYER_JUMP_SPEED = 15

# Screen Borders
LEFT_VIEWPORT_MARGIN = 150
RIGHT_VIEWPORT_MARGIN = 150
BOTTOM_VIEWPORT_MARGIN = 50
TOP_VIEWPORT_MARGIN = 100


class MyGame(arcade.Window):
    

    def __init__(self):

        # Parent Class
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)

        # General sprite lists
        self.coin_list = None
        self.wall_list = None
        self.player_list = None

        # Separate variable that holds the player sprite
        self.player_sprite = None

        # physics engine
        self.physics_engine = None

        # Scrolling
        self.view_bottom = 0
        self.view_left = 0

        arcade.set_background_color(arcade.csscolor.CORNFLOWER_BLUE)

    def setup(self):
        

        # Scrolling
        self.view_bottom = 0
        self.view_left = 0

        # Sprite lists
        self.player_list = arcade.SpriteList()
        self.wall_list = arcade.SpriteList()
        self.coin_list = arcade.SpriteList()
        
        # Player code
        self.player_sprite = arcade.Sprite("enter character png here", CHARACTER_SCALING) # ----> Change
        self.player_sprite.center_x = 64
        self.player_sprite.center_y = 96
        self.player_list.append(self.player_sprite)

        # Code for the ground
        for x in range(0, 1250, 64):
            wall = arcade.Sprite("Enter png here", TILE_SCALING) #-------> Change
            wall.center_x = x
            wall.center_y = 32
            self.wall_list.append(wall)

        # Put some crates on the ground
        # This shows using a coordinate list to place sprites
        coordinate_list = [[512, 96],
                           [256, 96],
                           [768, 96]]

        for coordinate in coordinate_list:
            # Add a crate on the ground
            wall = arcade.Sprite("enter obstacle png", TILE_SCALING) #--------> Change
            wall.position = coordinate
            self.wall_list.append(wall)

        # Use a loop to place some coins for our character to pick up
        for x in range(128, 1250, 256):
            coin = arcade.Sprite("enter coin png", COIN_SCALING) # -------> Change
            coin.center_x = x
            coin.center_y = 96
            self.coin_list.append(coin)
        self.player_sprite.center_x = 64
        

        # Create the 'physics engine'
        self.physics_engine = arcade.PhysicsEnginePlatformer(self.player_sprite,
                                                             self.wall_list,
                                                             GRAVITY)

    def on_draw(self):

        # Clear the screen to the background color
        arcade.start_render()

        # Draw sprites
        self.wall_list.draw()
        self.coin_list.draw()
        self.player_list.draw()

    def on_key_press(self, key, modifiers):

        if key == arcade.key.UP or key == arcade.key.W:
            if self.physics_engine.can_jump():
                self.player_sprite.change_y = PLAYER_JUMP_SPEED
        elif key == arcade.key.LEFT or key == arcade.key.A:
            self.player_sprite.change_x = -PLAYER_MOVEMENT_SPEED
        elif key == arcade.key.RIGHT or key == arcade.key.D:
            self.player_sprite.change_x = PLAYER_MOVEMENT_SPEED

    def on_key_release(self, key, modifiers):
        

        if key == arcade.key.LEFT or key == arcade.key.A:
            self.player_sprite.change_x = 0
        elif key == arcade.key.RIGHT or key == arcade.key.D:
            self.player_sprite.change_x = 0

    def update(self, delta_time):
        #Game logic

        # Update for sprites
        self.physics_engine.update()

        # --- Manage Scrolling ---

        # Track if we need to change the viewport

        changed = False

        # Scroll left
        left_boundry = self.view_left + LEFT_VIEWPORT_MARGIN
        if self.player_sprite.left < left_boundry:
            self.view_left -= left_boundry - self.player_sprite.left
            changed = True

        # Scroll right
        right_boundry = self.view_left + SCREEN_WIDTH - RIGHT_VIEWPORT_MARGIN
        if self.player_sprite.right > right_boundry:
            self.view_left += self.player_sprite.right - right_boundry
            changed = True

        # Scroll up
        top_boundry = self.view_bottom + SCREEN_HEIGHT - TOP_VIEWPORT_MARGIN
        if self.player_sprite.top > top_boundry:
            self.view_bottom += self.player_sprite.top - top_boundry
            changed = True

        # Scroll down
        bottom_boundry = self.view_bottom + BOTTOM_VIEWPORT_MARGIN
        if self.player_sprite.bottom < bottom_boundry:
            self.view_bottom -= bottom_boundry - self.player_sprite.bottom
            changed = True

        if changed:
            # Only scroll to integers!!!
            self.view_bottom = int(self.view_bottom)
            self.view_left = int(self.view_left)

            # Do the scrolling
            arcade.set_viewport(self.view_left,
                                SCREEN_WIDTH + self.view_left,
                                self.view_bottom,
                                SCREEN_HEIGHT + self.view_bottom)


def main():
    #startup code
    window = MyGame()
    window.setup()
    arcade.run()


if __name__ == "__main__":
    main()
